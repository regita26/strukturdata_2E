LINK LIST
SINGLE LINKED LIST
Single Linked List adalah sekumpulan dari node yang saling terhubung dengan node lain melalui sebuah pointer.
rangkaian single linked list tersebut diawali dengan sebuah head untuk menyimpan alamat awal dan di akhiri dengan node yang mengarah pointer ke null.Pada Implementasinya, Single Linked List terdapat dua variasi yaitu circular dan non-circular.
Single Linked List sendiri pun, terdapat beberapa metode yang dapat dilakukan yaitu :

1. Creation
2. Insert : 
    1. Depan
    2. Belakang
    3. Posisi
3. Delete :
    1. Depan
    2. Belakang
    3. Posisi
4. Traversal
5. Sorting
6. Searching
7. Termination

Class a Node
class Node:
    def __init__(self,initdata):
        self.data = initdata
        self.next = None
 
    def getData(self):
        return self.data 
    def getNext(self):
        return self.next 
    def setData(self,newdata):
        self.data = newdata 
    def setNext(self,newnext):
        self.next = newnext
        
Class Unordered List
class UnorderedList:
    def __init__(self):
        self.head = None    
    def show(self):
        current = self.head
        print ('Head ->', end="")
        while current != None:
            print (current.getData(), end=" -> ")
            current = current.getNext()
        print ('None’)
    def isEmpty(self):
        return self.head == None 

Add Link List
def add(self,item):
        temp = Node(item)
        temp.setNext(self.head)
        self.head = temp

SEARCH
traversal diinisialisasi untuk memulai di kepala
gunakan variabel boolean bernama found, Karena kita belum menemukan item di awal traversal, found dapat disetel ke False
Iterasi (kedua kondisi: ada lebih banyak node untuk dikunjungi dan kami belum menemukan item yang kami cari)
jika apakah data = node saat ini  yang ditemukan dapat diatur ke True.
lain terus memeriksa node berikutnya

def search(self,item):
        current = self.head
        found = False
        while current != None and not found:
            if current.getData() == item:
                found = True
                print('Data in List')
            else:
                current = current.getNext()
        return found 

REMOVE
def remove(self,item):
        current = self.head
        previous = None
        found = False
        while not found:
            if current.getData() == item:
                found = True
            else:
                previous = current
                current = current.getNext()

        if previous == None:
            self.head = current.getNext()
        else:
            previous.setNext(current.getNext())

DOUBLE LINKED LIST
Double Linked List adalah sekumpulan node data yang terurut linear atau sekuensial dengan dua buah pointer yaitu prev dan next.Double Linked List adalah linked list dengan node yang memiliki data dan dua buah reference link (biasanya disebut next dan prev) yang menunjuk ke node sebelum dan node sesudahnya. Pada implementasinya, terdapat dua variasi double linked list yaitu circular dan non-circular layaknya pada single linked list.

Operasi pada Double Linked List:
Double linked list memiliki beberapa operasi dasar pada list, misalkan penyisipan, penghapusan, menampilkan maju, dan menampilkan mundur.
1. Insert First
Insert First Penyisipan di awal list, sehingga pointer head juga akan berpindah ke elemen baru.

2. Insert Last
Insert Last Penyisipan di akhir list, sehingga pointer tail juga akan berpindah ke elemen baru.

3. Insert After / Before
Insert After / Before Penyisipan after/before kurang lebih sama satu sama lain. Pada kasus diatas berlaku juga insert before 3.

4. Delete First
Delete First Penghapusan di awal list, pointer head akan berpindah ke node selanjutnya,sementara node awal akan di dealokasi.

5. Delete Last
Delete Last Penghapusan di akhir list, pointer tail akan berpindah ke node sebelumnya,sementara node akhir akan di dealokasi.

6. Delete Node
Delete Node Penghapusan node dengan data tertentu, pada kasus diatas yaitu delete node 2.
      
